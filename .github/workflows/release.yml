name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run tests before release
      run: |
        pytest tests/ -v --cov=. --cov-report=term-missing

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        echo "# Release ${{ steps.get_version.outputs.VERSION }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## What's Changed" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md

        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        else
          git log --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        fi

        echo "" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Installation" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo '```bash' >> RELEASE_NOTES.md
        echo 'git clone https://github.com/${{ github.repository }}.git' >> RELEASE_NOTES.md
        echo 'cd audiobook-creator-tts' >> RELEASE_NOTES.md
        echo 'pip install -r requirements.txt' >> RELEASE_NOTES.md
        echo 'playwright install chromium' >> RELEASE_NOTES.md
        echo '```' >> RELEASE_NOTES.md

    - name: Create release archive
      run: |
        # Create a clean archive without .git and other unnecessary files
        tar -czf audiobook-creator-tts-${{ steps.get_version.outputs.VERSION }}.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='venv' \
          --exclude='audio' \
          --exclude='build' \
          --exclude='dist' \
          --exclude='.eggs' \
          .

    - name: Generate requirements hash
      run: |
        sha256sum requirements.txt > requirements.txt.sha256
        sha256sum requirements-test.txt > requirements-test.txt.sha256

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          audiobook-creator-tts-${{ steps.get_version.outputs.VERSION }}.tar.gz
          requirements.txt
          requirements.txt.sha256
          requirements-test.txt
          requirements-test.txt.sha256
          voices.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update release badge in README
      run: |
        # This is a placeholder for badge updates
        echo "âœ… Release created successfully"

  notify-release:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: create-release
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create summary
      run: |
        echo "# ðŸŽ‰ Release ${{ steps.get_version.outputs.VERSION }} Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The new release has been published to GitHub Releases." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ”— [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }})" >> $GITHUB_STEP_SUMMARY
